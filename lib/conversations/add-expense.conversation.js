const { addExpense } = require("../api/expenses");
const { TODAY, YESTERDAY, BEFORE_YESTERDAY, NO_COMMENT } = require("../const");
const categoryKeyboard = require("../keyboards/categories.keyboard");
const commentKeyboard = require("../keyboards/comment.keyboard");
const dateKeyboard = require("../keyboards/date.keyboard");

module.exports = async function addExpenseConversation(conversation, ctx) {
    try {
        await ctx.reply('–°–∫—ñ–ª—å–∫–∏ –≤–∏—Ç—Ä–∞—á–µ–Ω–æ –≤ –Ñ–≤—Ä–æ? –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 1000, 9.99, 7.5');
        let value;
        do {
            value = await conversation.form.number(ctx => ctx.reply('–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.'));

            if (value <= 0)
                await ctx.reply('–¢–∞–∫–µ –Ω–µ –º–æ–∂–Ω–∞...');
        } while (value <= 0);

        await ctx.reply('–Ø–∫–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç–∏?', { reply_markup: categoryKeyboard });
        const { msg: { text: category } } = await conversation.waitFor("message:text");

        await ctx.reply('–ö–æ–ª–∏ –±—É–ª–∞ –≤–∏—Ç—Ä–∞—Ç–∞?', { reply_markup: dateKeyboard });
        let date;
        do {
            const { msg: { text: dateTxt } } = await conversation.waitFor('message:text');

            const today = new Date();
            if (dateTxt === TODAY) {
                date = today;
            }
            else if (dateTxt === YESTERDAY) {
                date = new Date(today);
                date.setDate(today.getDate() - 1);
            }
            else if (dateTxt === BEFORE_YESTERDAY) {
                date = new Date(today);
                date.setDate(today.getDate() - 2);
            }
            else if (/^\d{2}\.\d{2}\.\d{4}$/.test(dateTxt)) {
                const [d, m, y] = dateTxt.split('.');
                const day = Number(d);
                const month = Number(m) - 1;
                const year = Number(y);

                if (new Date().getFullYear() === year)
                    date = new Date(year, month, day, 12);
            }

            if (!date)
                await ctx.reply('–©–æ—Å—å –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤...', { reply_markup: dateKeyboard });
        } while (!date);

        await ctx.reply('–î–æ–¥–∞—Ç–∏ —è–∫–∏–π—Å—å –∫–æ–º–µ–Ω—Ç–∞—Ä?', { reply_markup: commentKeyboard });
        const { msg: { text: commentAnswer } } = await conversation.waitFor('message:text');
        const comment = commentAnswer !== NO_COMMENT ? commentAnswer : undefined;

        await addExpense(value, category, date, comment, ctx.update.message.from.first_name);
        return await ctx.reply('üëç', { reply_markup: null });
    } catch (error) {
        await ctx.reply(`–ô–æ—Å–∏–ø –¥—Ä–∞–Ω–∏–π! –°—Ç–∞–ª–∞—Å—è —Ö–∞–ª–µ–ø–∞: ${error.message ?? error}`, { reply_markup: null });
    }
};
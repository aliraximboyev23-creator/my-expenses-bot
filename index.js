require('dotenv').config();

const { Bot, Keyboard, session } = require("grammy");
const { conversations, createConversation } = require("@grammyjs/conversations");
const { addExpense } = require('./api/expenses');

const TODAY = '–°—å–æ–≥–æ–¥–Ω—ñ';
const YESTERDAY = '–í—á–æ—Ä–∞';
const BEFORE_YESTERDAY = '–ü–æ–∑–∞–≤—á–æ—Ä–∞';
const NO = '–ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è';

const CATEGORIES = [
    ['üçî –á–∂–∞', 'üß• –û–¥—è–≥', 'üß∏ –Ü–≥—Ä–∞—à–∫–∏'],
    ['üíÑ –ö—Ä–∞—Å–∞', 'üå°Ô∏è –ó–¥–æ—Ä–æ–≤ º—è', '‚öΩÔ∏è –°–ø–æ—Ä—Ç'],
    ['üöó –ú–∞—à–∏–Ω–∞', 'üéÆ –†–æ–∑–≤–∞–≥–∏', 'üõ©Ô∏è –ü–æ–¥–æ—Ä–æ–∂—ñ'],
    ['üöï –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'üé• –ü—ñ–¥–ø–∏—Å–∫–∏', 'üè° –î—ñ–º']
];

const categoryKeyboard = new Keyboard().oneTime();
const dateKeyboard = new Keyboard().oneTime().text(TODAY).text(YESTERDAY).text(BEFORE_YESTERDAY);
const commentKeyboard = new Keyboard().oneTime().text(NO);

CATEGORIES.forEach(row => {
    categoryKeyboard.row();
    row.forEach(cat => categoryKeyboard.text(cat));
});

async function addExpenseConversation(conversation, ctx) {
    try {
        await ctx.reply('–°–∫—ñ–ª—å–∫–∏ –≤–∏—Ç—Ä–∞—á–µ–Ω–æ –≤ –Ñ–≤—Ä–æ? –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 1000, 9.99, 7.5');
        let value;
        do {
            value = await conversation.form.number(ctx => ctx.reply('–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.'));

            if (value <= 0)
                await ctx.reply('–¢–∞–∫–µ –Ω–µ –º–æ–∂–Ω–∞...');
        } while (value <= 0);

        await ctx.reply('–Ø–∫–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç–∏?', { reply_markup: categoryKeyboard });
        const { msg: { text: category } } = await conversation.waitFor("message:text");

        await ctx.reply('–ö–æ–ª–∏ –±—É–ª–∞ –≤–∏—Ç—Ä–∞—Ç–∞?', { reply_markup: dateKeyboard });
        let date;
        do {
            const { msg: { text: dateTxt } } = await conversation.waitFor('message:text');

            const today = new Date();
            if (dateTxt === TODAY) {
                date = today;
            }
            else if (dateTxt === YESTERDAY) {
                date = new Date(today);
                date.setDate(today.getDate() - 1);
            }
            else if (dateTxt === BEFORE_YESTERDAY) {
                date = new Date(today);
                date.setDate(today.getDate() - 2);
            }
            else if (/^\d{2}\.\d{2}\.\d{4}$/.test(dateTxt)) {
                const [d, m, y] = dateTxt.split('.');
                const day = Number(d);
                const month = Number(m) - 1;
                const year = Number(y);

                if (new Date().getFullYear() === year)
                    date = new Date(year, month, day, 12);
            }

            if (!date)
                await ctx.reply('–©–æ—Å—å –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤...', { reply_markup: dateKeyboard });
        } while (!date);

        await ctx.reply('–î–æ–¥–∞—Ç–∏ —è–∫–∏–π—Å—å –∫–æ–º–µ–Ω—Ç–∞—Ä?', { reply_markup: commentKeyboard });
        const { msg: { text: commentAnswer } } = await conversation.waitFor('message:text');
        const comment = commentAnswer !== NO ? commentAnswer : undefined;

        await addExpense(value, category, date, comment, ctx.update.message.from.first_name);
        return await ctx.reply('üëç', { reply_markup: null });
    } catch (error) {
        await ctx.reply(`–ô–æ—Å–∏–ø –¥—Ä–∞–Ω–∏–π! –°—Ç–∞–ª–∞—Å—è —Ö–∞–ª–µ–ø–∞: ${error.message ?? error}`, { reply_markup: null });
    }
}

const bot = new Bot(process.env.BOT_TOKEN);

bot.use(session({
    type: "multi",
    custom: {
        initial: () => ({}),
    },
    conversation: {}
}));
bot.use(conversations());

bot.use(createConversation(addExpenseConversation));

bot.use(async (ctx, next) => {
    if (ctx.chat.id !== Number(process.env.CHAT_ID))
        return await ctx.reply(`–£–ø—Å. –ù–µ —Ç–æ–π —á–∞—Ç. ${ctx.chat.id}`);

    await next();
});

bot.command('expense', async ctx => {
    const stats = await ctx.conversation.active();

    if (!Object.keys(stats).length)
        await ctx.conversation.enter('addExpenseConversation');
});

bot.command(['stats_w', 'stats_m', 'stats_y'], async ctx => {
    await ctx.reply('–¶–µ —â–µ –Ω–µ –≥–æ—Ç–æ–≤–æ...');
});

bot.on('msg:text', async ctx => {
    if (ctx.update.message.chat.type === 'private')
        return ctx.reply('–î–æ–¥–∞–π—Ç–µ –º–µ–Ω–µ —É –≥—Ä—É–ø—É');
});

(async () => {
    await bot.api.setMyCommands([
        { command: "expense", description: "–î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏" },
        { command: "stats_w", description: "–í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å" },
        { command: "stats_m", description: "–í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –º—ñ—Å—è—Ü—å" },
        { command: "stats_y", description: "–í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ —Ä—ñ–∫" }
    ]);

    bot.start();
})();